{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Footer/index.js","App.js","index.js"],"names":["FriendCard","props","className","onClick","processGuess","id","alt","name","src","image","Wrapper","console","log","this","type","href","gameStatus","intScore","intTopScore","children","React","Component","Footer","App","arrayShuffle","arr","output","i","length","randomIndex","Math","floor","random","itemAtIndex","updateGameStatus","newStatus","setState","arrIdx","friends","findIndex","isClicked","state","tempScore","tempTopScore","forEach","friend","setTimeout","bind","newfriends","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.959d23ce.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.processGuess(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nclass Wrapper extends React.Component {\n  // state = {\n  //   gameStatus: \"Click an image to begin\"\n  // }\n\n  // updateGameStatus = newStatus => {\n  //   this.setState.gameStatus(newStatus);\n  // }\n\n  render() {\n    console.log(\"this.props.type:\", this.props.type);\n  return <main>\n    <nav className=\"navbar navbar-expand-lg\">\n      <ul className=\"navbar-nav mr-0\">\n        <li className=\"nav-item\"><a className=\"navbar-brand\" href=\"/\">Clicky Game</a></li>\n        <li className=\"nav-other alert-instruct\"><span className={`alert alert-${this.props.type || \"white\"}`}>{this.props.gameStatus}</span>\n        </li>\n        <li className=\"nav-other\">Score {this.props.intScore} | Top Score {this.props.intTopScore}</li>\n      </ul>\n    </nav>\n    <div className=\"jumbo-container mx-0\">\n      <div className=\"jumbotron bg-dark text-light\">\n        <h4 className=\"jumbo-header text-center\">Click on an image to earn points, but don't click on any more than once!</h4>\n        \n      </div>\n    </div>\n    <div className=\"wrapper\">{this.props.children}</div>\n  </main>;\n  }\n}\n\n\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nclass Footer extends React.Component {\n  render() {\n\n      return (\n        <footer className=\"page-footer font-small pt-3 mb-0\">\n            <div className=\"footer-copyright text-center text-muted \">Ed Einfeld © 2019\n            </div>\n        </footer> \n      );\n    }\n}\n\n\n// function Footer() {\n//   return (\n//     <footer className=\"page-footer font-small bg-primary pt-4 mb-0\">\n//         <div className=\"footer-copyright text-center py-3 text-dark \">Ed Einfeld © 2019\n//             <a href=\"https://mdbootstrap.com/education/bootstrap/\"> MDBootstrap.com</a>\n//         </div>\n//     </footer> \n//   );\n// }\nexport default Footer;\n\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Footer from \"./components/Footer\"\nimport friends from \"./friends.json\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n  // setting init state\n    this.state = {\n      // setting this.state.friends to the friends json array\n      friends,\n      intScore: 0,\n      intTopScore: 0,\n      gameStatus: \"Click an image to begin\"\n\n    }\n\n    // Shuffle all the friends again\n    console.log(\"----> Game is shuffling\");\n    let newfriends = this.arrayShuffle(friends)\n    this.setState({ friends: newfriends });\n  }\n\n  //filter this.state.friends for friends with an id not equal to the id being removed\n  arrayShuffle = function(arr) {\n    let output = arr;\n     \n    for (var i = output.length-1; i >=0; i--) {\n     \n        var randomIndex = Math.floor(Math.random()*(i+1)); // generate rand from 0 to arr.length\n        var itemAtIndex = output[randomIndex]; // fill itematIndex as a temp field\n        output[randomIndex] = output[i]; // Here we are moving one arr elem from one place to another \n        output[i] = itemAtIndex;  // above three lines is a swap \n    }\n    return output;\n  }\n\n  // Update game status\n  updateGameStatus = newStatus => {\n  this.setState({gameStatus: newStatus});\n  }\n\n  //Process the click.  \n  processGuess = id => {\n    console.log(\"The id: \", id)\n    // Find the arr index of the clicked friend\n    let arrIdx = friends.findIndex(arr => arr.id === id);\n    console.log(\"arrIdx: \", arrIdx);\n    // error check\n    if (arrIdx > -1) {\n      // Test to see if we have not been clicked\n      if (friends[arrIdx].isClicked === 0) {\n        // Set to 1 for \"it's clicked\"\n        friends[arrIdx].isClicked = 1;\n        console.log(\"this.state.intScore before:\", this.state.intScore)\n\n        let tempScore = this.state.intScore + 1;\n        // Update the state of intScore\n        this.setState({ intScore: tempScore}); \n        console.log(\"friends[arrIdx]\", friends[arrIdx]);\n        console.log(\"====>intScore: \", tempScore);\n        // increment intTopScore if it's less than intScore\n        let tempTopScore = this.state.intTopScore;\n         (tempScore > tempTopScore)? this.setState({intTopScore: tempTopScore+1 }): console.log(\"\");\n         this.updateGameStatus(\"Correct Guess!\");\n      } else { // if already clicked Friend - You lose\n        console.log(\"reset my score\");\n        this.setState({ intScore: 0});\n        // reset all isClicked value\n        friends.forEach(friend => {\n          friend.isClicked = 0;\n        });\n        this.updateGameStatus(\"Wrong Guess!\");\n        // console.log(\"GameStatus: \", this.state.gameStatus)\n        setTimeout(function () {this.updateGameStatus(\"Start New Game\")}.bind(this), 2000);\n      }\n    }\n    // Shuffle all the friends again\n    console.log(\"----> Game is shuffling\");\n    let newfriends = this.arrayShuffle(friends)\n    this.setState({ friends: newfriends });\n\n  }  // End of processGuess\n\n  render() {\n    return (\n    <Wrapper\n      gameStatus={this.state.gameStatus}\n      intScore={this.state.intScore}\n      intTopScore={this.state.intTopScore}\n      type={(this.state.gameStatus === \"Wrong Guess!\")? \"danger\": (this.state.gameStatus === \"Start New Game\")? \"info\": null}\n      >\n      {this.state.friends.map(friend=>(\n        <FriendCard \n          processGuess={this.processGuess}\n          id={friend.id}\n          key={friend.id}\n          image={friend.image}\n        /> \n      ))}\n      <Footer />\n    </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}